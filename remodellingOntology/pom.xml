<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>BabylonHealth.neo4j</groupId>
	<artifactId>remodellingOntology</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<properties>
		<neo4j.version>3.0.6</neo4j.version>
	</properties>

	<dependencies>
		<dependency>
			<!-- This gives us the Procedure API our runtime code uses. We have a 
				`provided` scope on it, because when this is deployed in a Neo4j Instance, 
				the API will be provided by Neo4j. If you add non-Neo4j dependencies to this 
				project, their scope should normally be `compile` -->
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j</artifactId>
			<version>${neo4j.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-kernel</artifactId>
			<version>2.1.5</version>
			<scope>test</scope>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-repository-sail</artifactId>
			<version>2.7.10</version>
		</dependency>
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-rio-turtle</artifactId>
			<version>2.7.10</version>
		</dependency>
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-rio-rdfxml</artifactId>
			<version>2.7.10</version>
		</dependency>
		<dependency>
			<groupId>org.openrdf.sesame</groupId>
			<artifactId>sesame-rio-rdfjson</artifactId>
			<version>2.7.10</version>
		</dependency>
		<dependency>
			<groupId>org.neo4j.app</groupId>
			<artifactId>neo4j-server</artifactId>
			<version>2.1.5</version>
			<type>test-jar</type>
		</dependency>
		
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-kernel</artifactId>
			<version>2.1.5</version>
			<scope>test</scope>
			<type>test-jar</type>
		</dependency>


		<dependency>
			<!-- This is used for a utility that lets us start Neo4j with a specific 
				Procedure, which is nice for writing tests. -->
			<groupId>org.neo4j.test</groupId>
			<artifactId>neo4j-harness</artifactId>
			<version>${neo4j.version}</version>
			<scope>test</scope>
		</dependency>

<dependency>
     <groupId>org.neo4j.driver</groupId>
     <artifactId>neo4j-java-driver</artifactId>
     <version>1.0.5</version>
     <scope>test</scope>
   </dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<!-- https://mvnrepository.com/artifact/net.sourceforge.owlapi/owlapi-distribution -->
			<groupId>net.sourceforge.owlapi</groupId>
			<artifactId>owlapi-distribution</artifactId>
			<version>3.5.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.hermit-reasoner/org.semanticweb.hermit -->
		<dependency>
			<groupId>com.hermit-reasoner</groupId>
			<artifactId>org.semanticweb.hermit</artifactId>
			<version>1.3.8.4</version>
		</dependency>



		<!-- https://mvnrepository.com/artifact/net.sourceforge.owlapi/owlapi-api -->
		<dependency>
			<groupId>net.sourceforge.owlapi</groupId>
			<artifactId>owlapi-api</artifactId>
			<version>3.5.1</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<!-- Neo4j Procedures require Java 8 -->
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<!-- This generates a jar-file with our procedure code, plus any dependencies 
					marked as `compile` scope. This should then be deployed in the `plugins` 
					directory of each Neo4j instance in your deployment. After a restart, the 
					procedure is available for calling. -->
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
